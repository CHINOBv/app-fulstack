""" Clientes Querys """
type Cliente {
    id: ID
    nombre: String
    apellido: String
    empresa: String
    emails: [Email]
    edad: Int
    tipo: TipoCliente
    pedidos: [Pedido]
}
type Email {
    email: String
}

enum TipoCliente {
    BASICO
    PREMIUM
}
enum EstadoPedido {
    PENDIENTE
    COMPLETADO
    CANCELADO
}

""" Producto Types """
type getProducto {
    nombre: String
    precio: Int
    stock: Int
}

type Pedido {
    id: ID
    pedido: [PedidoProducto]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedido
}

type PedidoProducto {
    id: ID
    cantidad: Int
}
type ClienteTotal {
    total: Float
    cliente:[Cliente]
}

type Token {
    token: String!
}

type Query {
    getClientes(limite: Int, offset: Int): [Cliente]
    getCliente(id: ID) : Cliente
    totalClientes: String
    # Producto Querys
    getProductos(limite: Int, offset: Int, stock: Boolean): [Producto]
    getProducto(id:ID): Producto
    totalProductos: String
    #Pedidos 
    getPedidos(cliente: String): [Pedido]
    #Graficas
    topClientes: [ClienteTotal]
}

type Producto{
    id: ID
    nombre: String!
    precio: Int!
    stock: Int!
}

""" Clientes Inputs """
input EmailInput {
    email: String
}
input ClienteInput{
    id: ID
    nombre: String!
    apellido: String!
    empresa: String!
    emails: [EmailInput]
    edad: Int
    tipo: TipoCliente
    pedidos: [PedidoInput]
}

"""Producto Input"""
input ProductoInput{
    id: ID
    nombre: String!
    precio: Int!
    stock: Int!
}
""" Pedido Inputs """
input PedidoInput{
    id: ID
    pedido: [PedidoProductoInput]
    total: Int
    fecha: String
    cliente: ID
    estado: EstadoPedido
}
input PedidoProductoInput {
    id: ID
    cantidad: Int
}
type Mutation {
    # Mutations Client
    crearCliente(input: ClienteInput)  : Cliente
    actualizarCliente(input: ClienteInput)  : Cliente
    eliminarCliente(id: ID!) : String
    # Mutations Producto
    nuevoProducto(input: ProductoInput): Producto
    actualizarProducto(input: ProductoInput): Producto
    eliminarProducto(id:ID): String 
    #Pedido
    nuevoPedido(input: PedidoInput): Pedido
    actualizarEstado(input:PedidoInput): String
    crearUsuario(usuario: String!, password: String!) : String
    autenticarUsuario(usuario: String!, password: String!): Token
}
